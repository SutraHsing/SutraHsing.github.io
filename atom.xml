<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">Sutra Hsing</title>
    <subtitle type="html">A Gopher Studying Distributed Relational Databases</subtitle>
    <updated>2021-04-28T08:42:28&#43;08:00</updated>
    <id>https://sutrahsing.github.io/</id>
    <link rel="alternate" type="text/html" href="https://sutrahsing.github.io/" />
    <link rel="self" type="application/atom&#43;xml" href="https://sutrahsing.github.io/atom.xml" />
    <author>
            <name>sutra hsing</name>
            <uri>https://sutrahsing.github.io/</uri>
            
                <email>sutrahsing@163.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.76.5">Hugo</generator>
        <entry>
            <title type="text">Designing and Authentication System</title>
            <link rel="alternate" type="text/html" href="https://sutrahsing.github.io/posts/study/designing-and-authentication-system/" />
            <id>https://sutrahsing.github.io/posts/study/designing-and-authentication-system/</id>
            <updated>2021-04-28T08:25:18&#43;08:00</updated>
            <published>2021-03-13T00:00:00&#43;08:00</published>
            <author>
                    <name>sutra hsing</name>
                    <uri>https://sutrahsing.github.io/</uri>
                    <email>sutrahsing@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">这段虚构的对话提供了一个叫做&amp;quot;Charon&amp;quot;的基于开放网络的认证系统设计。跟随着对话，Athena和Euripides发现开放网络环境中的安全问题。完成系统的设计后，Athena把系统的名字改为&amp;quot;Kerberos&amp;quot;，这就是MIT&#39;s Project Athena设计完成的认证系统。</summary>
            
                <content type="html">&lt;h1 id=&#34;设计认证系统四幕对话&#34;&gt;设计认证系统：四幕对话&lt;/h1&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;这段虚构的对话提供了一个叫做&amp;quot;Charon&amp;quot;的基于开放网络的认证系统设计。跟随着对话，Athena和Euripides发现开放网络环境中的安全问题。必须解决发现的每个问题，Charon的设计随之发展。直到对话结束，Athena和Euripides才完成他们的工作。&lt;/p&gt;
&lt;p&gt;完成系统的设计后，Athena把系统的名字改为&amp;quot;Kerberos&amp;quot;，这就是MIT&#39;s Project Athena设计完成的认证系统。&lt;/p&gt;
&lt;h2 id=&#34;剧中人&#34;&gt;剧中人&lt;/h2&gt;
&lt;p&gt;雅典娜 一个新兴的系统开发人员&lt;/p&gt;
&lt;p&gt;欧里庇得斯 一个经验丰富的开发人员，一个怪人&lt;/p&gt;
&lt;h2 id=&#34;第一幕&#34;&gt;第一幕&lt;/h2&gt;
&lt;p&gt;格子间里。Athena和Euripides相邻的终端上工作。&lt;/p&gt;
&lt;p&gt;Athena: Hey Rip. 这个分时系统太麻烦了。每个人都在登录，我已经没法工作了。&lt;/p&gt;
&lt;p&gt;Euripides: 别跟我抱怨。我只是在这里工作。&lt;/p&gt;
&lt;p&gt;Athena: 你知道我们需要什么吗？我们要给每个人一个自己的工作站，这样就不用担心共享电脑了。然后用一个网络连接所有的工作站，大家互相都可以通信。&lt;/p&gt;
&lt;p&gt;Euripides: 好吧。那我们要多少？一千个工作站？&lt;/p&gt;
&lt;p&gt;Athena: 差不多。&lt;/p&gt;
&lt;p&gt;Euripides: 你知道一个常见的工作站的磁盘大小吗？根本不够你在分时设备上安装的所有软件的空间。&lt;/p&gt;
&lt;p&gt;Athena: 我已经有办法了。我们可以把软件分布在多个服务器上。你登录到一个工作站，工作站通过网络连接到其中一个服务器，访问对应的软件。这样配置可以让所有的工作站使用一样的软件，软件更新也很方便。不需要挨个工作站地更新。只要修改软件服务器。&lt;/p&gt;
&lt;p&gt;Euripides: 好吧。那个人文件怎么办呢？分时系统上，我可以登录，从任意的终端连接到系统取到我自己的文件。我能到任何工作站自动取到自己的文件吗？还是说必须像PC用户一样把文件保存在软盘上？我希望不是这样。&lt;/p&gt;
&lt;p&gt;Athena: 我觉得我们可以用一些机器提供个人文件存储。你就可以登录到任意的工作站取到你的文件了。&lt;/p&gt;
&lt;p&gt;Euripides: 那打印呢？每个工作站都有自己的打印机吗？你花的是谁的钱呢？还有电子邮件？怎么把邮件分发到所有这些工作站？&lt;/p&gt;
&lt;p&gt;Athena: 啊……我们肯定没有钱给每个人都配打印机，但是我们可以用专门的机器负责打印服务。你发送一个任务到打印服务器，它就给你打印。也可以这样弄邮件。用一个机器专门负责邮件服务。你收邮件的时候，连接邮件服务器收取你的邮件。&lt;/p&gt;
&lt;p&gt;Euripides: 你的工作站系统听上去挺不错的Tina。我要是有了自己的工作站，你知道我怎么做吗？我会找到你的用户名，让我的工作站认为我是你。那我就能连接邮件服务取你的邮件了。连接你的文件服务删了你的文件，然后——&lt;/p&gt;
&lt;p&gt;Athena: 能这样吗？&lt;/p&gt;
&lt;p&gt;Euripides: 当然了！这些网络服务器怎么知道我不是你？&lt;/p&gt;
&lt;p&gt;Athena: 呃，我不知道。我得好好想想。&lt;/p&gt;
&lt;p&gt;Euripides: 可以啊。你想出来了跟我说。&lt;/p&gt;
&lt;h2 id=&#34;第二幕&#34;&gt;第二幕&lt;/h2&gt;
&lt;p&gt;Euripides的办公室，第二天早上。Euripides坐在他的位置，正在读邮件。Athena敲了门。&lt;/p&gt;
&lt;p&gt;Athena: 我已经有办法在开放的网络环境保证安全了。像你这样的缺德的人没法在网络服务里面冒名了。&lt;/p&gt;
&lt;p&gt;Euripides: 是这样吗？请坐。&lt;/p&gt;
&lt;p&gt;Athena坐下。&lt;/p&gt;
&lt;p&gt;Athena: 在我说之前，能先定一个规则吗？&lt;/p&gt;
&lt;p&gt;Euripides: 你要定什么规则？&lt;/p&gt;
&lt;p&gt;Athena: 比如我说像这样说：“我要电子邮件的时候，联系邮件服务器，发起请求发送邮件到我的工作站。”事实上我不是联系邮件服务器的实体。而是我在用一个程序访问邮件服务器，然后取回我的邮件。这里说的程序是邮件服务程序对应的&lt;strong&gt;客户端&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但是我就不说“这个客户端做了这个那个”了。我就只说，“我做了这个那个”。当然要记住，客户端程序在代表我做事。可以吗？&lt;/p&gt;
&lt;p&gt;Euripides: 当然。没问题。&lt;/p&gt;
&lt;p&gt;Athena: 好的。我从解决的问题开始讲。在一个开放的网络环境中，机器提供的服务必须能确认请求服务的人是什么身份。如果我联系邮件服务然后请求我的邮件，服务程序必须要能验证我是谁，对吗？&lt;/p&gt;
&lt;p&gt;Euripides: 没错。&lt;/p&gt;
&lt;p&gt;Athena: 你可以要求邮件服务器在使用前要求输入密码来粗糙地解决这个问题。输入密码，我就能向服务器证明我是谁。&lt;/p&gt;
&lt;p&gt;Euripides: 这个确实太笨了。这样的体系里面，每个服务器都要知道你的密码。如果网络里面有一千个用户，每个服务器都必须知道一千个密码。如果你要改密码，你必须联系所有的服务器跟它们说明修改。我觉得你的系统不会这样笨。&lt;/p&gt;
&lt;p&gt;Athena: 我的系统不笨。它像这样工作：不只是人有密码，服务也有密码。每个人知道自己的密码，每个服务程序也知道自己的密码。再有一个&lt;strong&gt;认证服务&lt;/strong&gt;知道所有密码——每个用户的密码和每个服务的密码。这个认证系统在一个集中式的数据库里存储了这些密码。&lt;/p&gt;
&lt;p&gt;Euripides: 你这个认证服务起名字了吗？&lt;/p&gt;
&lt;p&gt;Athena: 我还没想呢。你有什么建议吗？&lt;/p&gt;
&lt;p&gt;Euripides: 那个运送死者穿过Styx河的家伙叫什么名字？&lt;/p&gt;
&lt;p&gt;Athena: Charon?&lt;/p&gt;
&lt;p&gt;Euripides: 对！就是他！你要是不能证明自己的身份他可不会送你过河。&lt;/p&gt;
&lt;p&gt;Athena: 你又来了Rip，又想重写希腊神话了。Charon可不关心你的身份。他只想确保你已经死了。&lt;/p&gt;
&lt;p&gt;Euripides: 那你有更好的名字吗？&lt;/p&gt;
&lt;p&gt;停顿&lt;/p&gt;
&lt;p&gt;Athena: 没，还没有。&lt;/p&gt;
&lt;p&gt;Euripides: 那我们就叫这个认证系统&amp;quot;Charon&amp;quot;。&lt;/p&gt;
&lt;p&gt;Athena: 好。我该说一下这个系统了，对吧？&lt;/p&gt;
&lt;p&gt;比如你想用邮件服务。在我的这个系统中，你要是想使用一个服务，只有让呃，Charon告诉这个服务你就是你声称的那个人。你向Charon认证了自己之后才能得到许可。要请求Charon的认证的话，你必须告诉Charon你想进入哪个服务。如果你想用的是邮件服务器，你要告诉Charon。&lt;/p&gt;
&lt;p&gt;Charon会要求你证明自己的身份。你通过提供密码来证明。Charon拿到你的密码和你在Charon数据库里面的存储的哪一个密码进行对比。如果两个密码匹配了，Charon就认为你的认证通过。&lt;/p&gt;
&lt;p&gt;这样Charon就可以很方便地让邮件服务器了解你是你声称的那个人了。因为Charon知道所有的服务密码，它也知道邮件服务的密码。你向Charon证明了自己，可以想到Charon可以给你邮件服务的密码，你就可以访问邮件服务。&lt;/p&gt;
&lt;p&gt;问题是，Charon不能直接给你密码，因为这样你就知道了。下次你需要邮件，可以绕过Charon，不用识别自己的身份就可以使用邮件服务。甚至可以伪装成其他人，以别人的名字使用邮件服务器。&lt;/p&gt;
&lt;p&gt;所以Charon不给你邮件服务的密码，给你一个邮件服务TICKET。这个ticket包含你的名字，但是你的名字是用收件服务的密码加密的。&lt;/p&gt;
&lt;p&gt;有了这个ticket，你可以跟邮件服务请求你的邮件。你告诉邮件服务你是谁来发起请求，配备的ticket就可以证明你是你所声称的人。&lt;/p&gt;
&lt;p&gt;服务器用自己的密码解密ticket，如果ticket被正确地解密了，服务器就得到了Charon放在里面的用户名。&lt;/p&gt;
&lt;p&gt;服务把这个名字和你随着ticket一起发过来的那个名字一起比较。如果名字匹配了，邮件服务器就认为你通过了认证，然后把邮件发送给你。&lt;/p&gt;
&lt;p&gt;Euripides: 我有一些问题。&lt;/p&gt;
&lt;p&gt;Athena: 我就知道。那你说吧。&lt;/p&gt;
&lt;p&gt;Euripides: 服务程序解密一个ticket的时候，怎么知道有没有正确解密这个ticket？&lt;/p&gt;
&lt;p&gt;Athena: 我不知道。&lt;/p&gt;
&lt;p&gt;Euripides: 也许你可以在ticket里面加上服务的名字。这样一个服务解密一个ticket，就可以通过判断有没有找到它的名字来衡量这算不算成功。&lt;/p&gt;
&lt;p&gt;Athena: 听上去很不错。所以ticket像这样：&lt;/p&gt;
&lt;p&gt;TICKET - {username:servicename}&lt;/p&gt;
&lt;p&gt;Euripides: 所以ticket就只有你的用户名和服务名？&lt;/p&gt;
&lt;p&gt;Athena: 用服务器的密码加密的。&lt;/p&gt;
&lt;p&gt;Euripides: 我觉得这些信息对于保证ticket安全还不够。&lt;/p&gt;
&lt;p&gt;Athena: 那你是什么意思？&lt;/p&gt;
&lt;p&gt;Euripides: 假设你向Charon请求一个邮件服务器ticket。Charon准备ticket，里面有你的名字&amp;quot;tina&amp;quot;。假设我在Charon通过网络发送给你的的图中拷贝了ticket。假设我让我不安全的工作站相信我的用户名是&amp;quot;tina&amp;quot;。我工作站上的邮件客户端程序认为我是你。在你的名义下，程序转发这个偷来的ticket给邮件服务器。服务器解密ticket发现这个是有效的。ticket里面的用户名和发送ticket的用户的名字一样。邮件服务器就会把你的邮件给我……&lt;/p&gt;
&lt;p&gt;Athena: 哦！好吧，这可不太好！&lt;/p&gt;
&lt;p&gt;Euripides: 但是我有一个办法解决这个问题。或者说至少一定程度上解决这个问题。我觉得Charon应该在服务ticket里面包含更多的信息。除了用户名，还应该包含用户请求Charon的ticket时的网络地址。这样就给你多了一层保护。&lt;/p&gt;
&lt;p&gt;这样讲。假设我现在偷了你的邮件ticket。这个ticket有你的工作站网络地址在里面，这个地址和我的工作站地址不匹配。我以你的名义转发这个偷来的ticket给邮件服务器。服务器程序从ticket里面解密出来用户名和网络地址，和发送ticket的那个实体的用户名和网络地址进行比较。用户名匹配了，但是网络地址不匹配。服务拒绝这个ticket，因为显然这是偷来的。&lt;/p&gt;
&lt;p&gt;Athena: 太棒了，太棒了！我多希望我想到这样一点、&lt;/p&gt;
&lt;p&gt;Euripides: 这就是我要说的。&lt;/p&gt;
&lt;p&gt;Athena: 那修改后的ticket设计看上去像这样：&lt;/p&gt;
&lt;p&gt;TICKET - {username:ws_address:servicename}&lt;/p&gt;
&lt;p&gt;Athena: 我现在太激动了。我发赶紧做一个Charon看看能不能起作用吧！&lt;/p&gt;
&lt;p&gt;Euripides: 先等会。我还有一些问题。&lt;/p&gt;
&lt;p&gt;Athena: 好。（Athena靠在她的椅子上）说。&lt;/p&gt;
&lt;p&gt;Euripides: 听上去每次我要用一个服务，我都要一个新的ticket。如果我投入一整天的工作，我可能需要多次拿到我的邮件。是不是每次想拿邮件的时候都要一个新的ticket？如果是这样，我不喜欢你的这个系统。&lt;/p&gt;
&lt;p&gt;Athena:啊……我不知道为什么ticket不能重复使用。如果你拿到了邮件服务的ticket，你应该能反复使用它。比如，一个邮件客户端程序以你的名义请求服务，它可以用ticket的一个拷贝副本转发给邮件服务器。&lt;/p&gt;
&lt;p&gt;Euripides: 那就好。但是我还有问题。你的意思好像是我想要一个我还没有ticket的服务的时候，必须每次把我的密码给Charon。我登录了，然后想要访问我的文件。我向Charon请求特定ticket，这就一定需要我用密码。然后我想读邮件。再请求Charon，我还得输入我的密码。假设我想发送邮件信息给打印机服务器。再发送请求，然后才能拿到图片。&lt;/p&gt;
&lt;p&gt;Athena: 呃，对，是这样。&lt;/p&gt;
&lt;p&gt;Euripides: 如果这还不够糟糕，这样想：一定你要向Charon认证你自己，你要通过网络发送你的密码明文。像你这样聪明的人一定能监控到网络，然后偷到别人的密码。如我我拿到了你的密码，我可以用你的名字用所有的服务。Athena叹气。&lt;/p&gt;
&lt;p&gt;Athena: 这真是一个很严重的问题。我猜我要去重新规划一下。&lt;/p&gt;
&lt;h2 id=&#34;第三幕&#34;&gt;第三幕&lt;/h2&gt;
&lt;p&gt;第二天早晨，Athena在咖啡区域遇到了Euripides。他接水的时候，她拍了拍他的肩膀。&lt;/p&gt;
&lt;p&gt;两个人往咖啡机那儿去。&lt;/p&gt;
&lt;p&gt;Athena: 我又有一个新版的Charon可以解决我们的问题了。&lt;/p&gt;
&lt;p&gt;Euripides: 真的吗？很快啊。&lt;/p&gt;
&lt;p&gt;Athena: 你知道吗，这些问题困扰了我一整晚。&lt;/p&gt;
&lt;p&gt;Euripides: 肯定是你太内疚了。我们能去那个小会议室吗？&lt;/p&gt;
&lt;p&gt;Athena: 当然啦。&lt;/p&gt;
&lt;p&gt;两个人到小会议室。&lt;/p&gt;
&lt;p&gt;Athena: 我还是从问题开始讲起，但是我会反过来把它们变成这个系统的需求。&lt;/p&gt;
&lt;p&gt;Athena清了清嗓子。&lt;/p&gt;
&lt;p&gt;Athena: 第一个需求是：用户只需要在他们工作站seesion开始的时候，输入一次密码。这个需求说明你不用每次需要一个新的服务ticket都输入密码。第二个需求：密码不应该在网络中明文发送。&lt;/p&gt;
&lt;p&gt;Euripides: 好的。&lt;/p&gt;
&lt;p&gt;Athena: 我从第一个需求开始：你应该只用一次密码。我这里面引入了一个新的网络服务满足这个需求。它被叫做&amp;quot;ticket-granting&amp;quot;服务（授予ticket服务）。这个服务给已经向Charon认证自己身份的用户颁发ticket。如果你有这个ticket-granting ticket，你就可以用ticket-granting服务。&lt;/p&gt;
&lt;p&gt;这个ticket-granting服务就是另一个版本的Charon，因为它直接访问Charon数据库。它是Charon的一部分，可以让你用ticket认证自己，不需要密码。&lt;/p&gt;
&lt;p&gt;那么，认证系统现在就像这样工作：你登录工作站，用一个叫kinit的程序联系Charon服务器。你向Charon证明自己的身份，kinit程序帮你拿到ticket-granting ticket。&lt;/p&gt;
&lt;p&gt;现在你可以说自己要从邮件服务器获得邮件。你还没有一个邮件服务ticket，所以用&amp;quot;ticket-granting&amp;quot; ticket来获得邮件服务的ticket。你不需要用密码来拿新的ticket。&lt;/p&gt;
&lt;p&gt;Euripides: 我想要其他网络服务的时候，是不是每次必须要一个新的&amp;quot;ticket-granting&amp;quot; ticket？&lt;/p&gt;
&lt;p&gt;Athena: 不用。我们上次已经说了ticket可以重复使用。一旦你获得了一个ticket-granting ticket，就不再需要了。可以用这个ticket-granting ticket获得其他需要的ticket。&lt;/p&gt;
&lt;p&gt;Euripides: 好，这个很合理。因为能重用ticket，一旦ticket-granting 服务给了你指定服务的ticket，你也就不再需要那个ticket了。&lt;/p&gt;
&lt;p&gt;Athena: 对，是不是很优雅？&lt;/p&gt;
&lt;p&gt;Euripides: 好，我现在还买账……只要你拿ticket-granting ticket的时候不用在网络上发送密码明文。&lt;/p&gt;
&lt;p&gt;Athena: 就像我说的，我也解决这个问题了。事情是这样的，我说你必须联系Charon取得ticket-granting ticket，听上去是你必须在网络上发送密码明文给Charon服务器。但是不一定是这种方式。&lt;/p&gt;
&lt;p&gt;真实情况下是这样的。当你用kinit程序获得ticket-granting ticket，kinit不把你的密码发送给Charon服务器，kinit只发送你的用户名。&lt;/p&gt;
&lt;p&gt;Euripides: 好的。&lt;/p&gt;
&lt;p&gt;Athena: Charon用你的用户名查找你的密码。然后Charon造了一个数据包，包含ticket-granting ticket。把这个包发送给你之前，Charon用你的密码加密这个包的内容。&lt;/p&gt;
&lt;p&gt;你的工作站拿到这个ticket包。你输入你的密码。kinit用你输入的密码尝试解密这个ticket。kinit成功解密后， 你就向Charon认证了自己。你现在拥有了一个ticket-granting ticket，这个ticket就可以用来获得你所需要的其他ticket。&lt;/p&gt;
&lt;p&gt;你觉得怎么样？&lt;/p&gt;
&lt;p&gt;Euripides: 我不知道……我在思考。我觉得你刚刚描述的这部分系统的工作很不错。你的系统只需要我认证自己一次。然后Charon可以在我不知情的情况下解决服务的ticket。天衣无缝。但是有一些设计让我感觉很奇怪。关于ticket可以重用的问题。我同意ticket必须是可以重用的，但是可重用的ticket，天然地，非常危险。&lt;/p&gt;
&lt;p&gt;Athena: 你是什么意思？&lt;/p&gt;
&lt;p&gt;Euripides: 你这样想。假设你在用一个不安全的工作站。在你登录的session，你获取了一个邮件服务ticket，一个打印服务ticket，和一个文件服务ticket。假设你在登出工作站的时候无意间留下了这些ticket。&lt;/p&gt;
&lt;p&gt;现在假如我登录了这个工作站然后找到这些ticket。我想捣点乱，我可以让工作站认为我就是你。因为ticket是以你的名字做出来的，我可以用邮件客户端程序访问你的邮件，访问文件服务客户端然后删掉你的文件，还可以用打印命令用你的账户跑大量账单。都是因为这个ticket意外地留在了那儿。&lt;/p&gt;
&lt;p&gt;而且没法阻止我拷贝这些ticket给我自己。我就可以永远用这些ticket了。&lt;/p&gt;
&lt;p&gt;Athena: 但是这个很好解决。我们可以写一个程序在用户登录的session最后销毁这些用户ticket。这些ticket被销毁了就不能用了。&lt;/p&gt;
&lt;p&gt;Euripides: 显然你的系统必须要要有一个销毁ticket的程序，但是让用户依赖这样的东西太蠢了。你不能指望用户每次完成工作站会话时都记得销毁他们的票据。即使你的用户销毁他们的ticket，考虑下面的场景。&lt;/p&gt;
&lt;p&gt;我用一个程序监控网络，在ticket在网络上传输的时候拷贝。假如我想害你。我等你开始工作站的session，我就开启我的程序拷贝你的所有ticket。&lt;/p&gt;
&lt;p&gt;等你结束了session，最后登出然后离开。我伪造我的工作站网络软件，更改地址，以便匹配你使用的工作站地址。我让我的工作站相信我是你。我又你的ticket，你的用户名，正确的网络地址。我就可以用你的名字使用这些ticket了。&lt;/p&gt;
&lt;p&gt;你在你结束工作站session之前销毁ticket也没有用。我偷的ticket可以一直有效，因为你现在的设计没有重用ticket的次数限制，或者有效时长的限制。&lt;/p&gt;
&lt;p&gt;Athena: 我明白你说的了。ticket不能永远有效，因为它们会带来巨大的安全风险。我们必须限制ticket可以使用的时长，也许可以给ticket一种过期日期。&lt;/p&gt;
&lt;p&gt;Euripides: 没错。我认为每个ticket还需要两个额外的信息：一个生命周期标明ticket有效的时长，一个时间戳表明Charon什么时候签发的这个ticket。所以一个ticket可以像这样：&lt;/p&gt;
&lt;p&gt;Euripides走到黑板前潦草地写下：&lt;/p&gt;
&lt;p&gt;TICKET - {username:address:servicename:lifespan:timestamp}&lt;/p&gt;
&lt;p&gt;Euripides: 现在当一个服务解密ticket，它检查ticket用户名和地址是不是匹配发送者的用户名和地址，然后用时间戳和时间跨度信息看ticket有没有过期。&lt;/p&gt;
&lt;p&gt;Athena: 好的。一般的服务ticket要有多长的生命周期？&lt;/p&gt;
&lt;p&gt;Euripides: 我不知道。可能是一个典型的工作站session的时长。也就是八个小时。&lt;/p&gt;
&lt;p&gt;Athena: 那如果我坐在我的工作站超过八个小时，我的ticket就过期了。包括我的ticket-granting ticket。所以八个小时之后我必须向Charon重新认证。&lt;/p&gt;
&lt;p&gt;Euripides: 不合理对吗？&lt;/p&gt;
&lt;p&gt;Athena: 我觉得不合理。假设我们这么设置，ticket八个小时之后过期。我现在有一个问题。假如我从网络拷贝了你的ticket——&lt;/p&gt;
&lt;p&gt;Euripides: （目光闪烁）嗷，Tina！你不会这样做的对吗？&lt;/p&gt;
&lt;p&gt;Athena: 这只是为了方便讨论。我拷贝了你的ticket。然后等你登出。假设你预约了一个医生或者要去上一节课，几个小时之后你结束工作站的session。你很聪明，在登出前销毁了你的ticket副本。&lt;/p&gt;
&lt;p&gt;但是我偷到了你的ticket，这些ticket还有六个小时。我有足够的时间偷走你的文件，以你的名义打印上千份不管什么东西。&lt;/p&gt;
&lt;p&gt;你看，生命周期-时间戳的工作很好地解决了盗贼在ticket过期后还要用你的ticket的问题。但是如果他在有效期之前……&lt;/p&gt;
&lt;p&gt;Euripides: 额，好吧……你说得当然没错。&lt;/p&gt;
&lt;p&gt;Athena: 我想我们还是遇到了一个大问题。（她叹气）&lt;/p&gt;
&lt;p&gt;沉默。&lt;/p&gt;
&lt;p&gt;Euripides: 你今晚一定很忙了。要一些咖啡吗？&lt;/p&gt;
&lt;p&gt;Athena: 当然啦。&lt;/p&gt;
&lt;h2 id=&#34;第四幕&#34;&gt;第四幕&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.plantuml.com/plantuml/svg/dLB1ZjCm4BtdAqQzS0eiI80KLTLAXGFQ8tkZ5NAIQMebiQFnc5Ar--zCMmU8IJPYJwtznk-zUNdtZXMnRviajpzXuHtIAmS7IxK0hArP99qCw49toZ3KscW6IoKIlBqRG8jMwGQAHgFXHHXvTvUWAK6eR_GFU8HFsZ7ft5_8OIt3I4EDzLwHDO7XVIGY_shaj28vQLE1-FsX2-m5FqI2NmME-8FHwE77Fm-JYgplGBaQTfOWKWpdv9P4kWfsCxX4PrIB0Lcclv5lormLTLQe4ZblFAuSEYVRrtXSlhb0g_EuoFPA-hrJpXt4Pc8i8pIuOx2xddt27wImCQTPuMnZUj-PAaiIF0l9NEu4RlGEdUIMiMxHiMgxfsjIup4bmnQag-al9haeptiqCg3OqaG6vzxVEVWx_-LlUuk4TBM_PZ9Kps0W896SucMV04r1nuwnX8FcFSmcbaGhBjDdLtpyidxu_DXx3lGELKM8vb_sBMnCv2WcdtSugCapvcxUib2KsDTiJqQx4UVPBzvtUBGxOMYaFDUBoSQ4S5_Sa9SKP2wfZHboQWVY00YzKtc3hqVg4orvweG7-R-LGxJtykFRvXS0&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;第二天早晨在Euripides的办公室。Athena敲门。&lt;/p&gt;
&lt;p&gt;Euripides: 你大清早的有黑眼圈啊。&lt;/p&gt;
&lt;p&gt;Athena: 对啊，你知道。又是一个漫长的夜晚。&lt;/p&gt;
&lt;p&gt;Euripides: 你解决重复使用的问题了吗？&lt;/p&gt;
&lt;p&gt;Athena: 解决了。&lt;/p&gt;
&lt;p&gt;Euripides: 请坐。&lt;/p&gt;
&lt;p&gt;她坐下了。&lt;/p&gt;
&lt;p&gt;Athena: 还是一样，我得重复一下这个问题。ticket在一点时间范围内是可以重复使用的，比如说八个小时。如果某人偷了你的ticket，然后在过期前使用它，我们是没法阻止的。&lt;/p&gt;
&lt;p&gt;Euripides: 就是这个问题。&lt;/p&gt;
&lt;p&gt;Athena: 我们可以让ticket不能重复使用来解决这个问题。&lt;/p&gt;
&lt;p&gt;Euripides: 但是你每次想用一个网络服务的时候就不得不再请求一个新的ticket。&lt;/p&gt;
&lt;p&gt;Athena: 对。充其量是一个笨拙的解决方案。（停顿）啊，我该怎么说？（她沉吟了一会儿。）&lt;/p&gt;
&lt;p&gt;好吧，我还是以需求的形式再次说明问题。一个网络服务必须证明使用ticket的人和签发给他ticket的是同一个人。&lt;/p&gt;
&lt;p&gt;让我们再捋一遍认证的过程，看看我们能不能提出一种合适的办法解决我们的这个问题。&lt;/p&gt;
&lt;p&gt;我想用一个网络服务。我在我的工作站启动一个客户端程序访问这个服务。客户端发送三样信息给服务机器——我的名字，我的工作站网络地址，和特定的服务ticket。&lt;/p&gt;
&lt;p&gt;ticket包含这个ticket颁发给的那个用户的名字，和那个用户在请求ticket的时候的工作站地址。还包含一个过期信息，用生命周期和时间戳的格式表示。这些信息都用Charon里面的你请求的服务密码加密了。&lt;/p&gt;
&lt;p&gt;我们现在认证的方式依赖下面的测试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务可以解密这个ticket吗？&lt;/li&gt;
&lt;li&gt;ticket过期了吗？&lt;/li&gt;
&lt;li&gt;ticket里面的用户名和工作站的地址与发送ticket的人的信息匹配吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些测试证明了什么？第一个测试证明ticket是不是来自于Charon。如果不能被正确解密，就不是来自于真正的Charon。真正的Charon会用服务的密码加密ticket。只有Charon和服务本身知道服务的密码。如果ticket被成功解密，服务就知道这个来自于真实的Charon。这个测试防止人们仿造Charon ticket。&lt;/p&gt;
&lt;p&gt;第二个测试检查ticket的生命周期和时间戳。如果过期了，服务拒绝这个ticket。这个测试组织人们用旧的ticket，可能是被别人偷走的ticket。&lt;/p&gt;
&lt;p&gt;第三个测试检查ticket，用户名和地址。如果测试失败了，可能是从别人那偷来的ticket。这个ticket自然会被拒绝。&lt;/p&gt;
&lt;p&gt;如果名字和地址匹配，这个测试证明了什么？什么也证明不了。有人搞鬼可以从网络上偷来ticket，修改他的工作站地址和用户名，窃取他人的资源。像我昨天说的，ticket可以在过期前反复使用。因为服务没有办法确定发送ticket的用户就是ticket的合法拥有者。&lt;/p&gt;
&lt;p&gt;服务没有办法确定因为没有和用户共享秘密。你这样想。如果我在看守Elsinore，就是哈姆雷特里面的那个城堡，然后你打算欺骗我，我不会让你通过，除非你提供正确的密码。这种情况就是我们两个人共享了秘密。&lt;/p&gt;
&lt;p&gt;我昨天晚上想，为什么不让Charon生成一个密码给合法的ticket拥有人，并且把这个密码分享给服务呢？Charon把这个session key的一个副本给服务，一份给用户。服务从用户哪里拿到ticket的时候，可以用这个session key来测试用户的身份。&lt;/p&gt;
&lt;p&gt;Euripides: 等一下。Charon怎么把session key给这二者呢？&lt;/p&gt;
&lt;p&gt;Athena: ticket的拥有者从Charon的回复中拿到session key。像这样：&lt;/p&gt;
&lt;p&gt;她在黑板上写下：&lt;/p&gt;
&lt;p&gt;CHARON REPLY - [sessionkey|ticket]&lt;/p&gt;
&lt;p&gt;服务的那份key来自于ticket，服务解密ticket的时候就可以拿到key。所以ticket就像这样：&lt;/p&gt;
&lt;p&gt;TICKET - {sessionkey:username:address:servicename:lifespan:timestamp}&lt;/p&gt;
&lt;p&gt;你想要访问一个服务的时候，客户端程序启动，这个程序创建一个信息，我们称之为AUTHENTICATOR。AUTHENTICATOR包含你的名字和你的工作站地址。客户端用session key加密这些信息，你前面请求ticket的时候获得了这个session key的副本。&lt;/p&gt;
&lt;p&gt;AUTHENTICATOR - {username:address} 用session key加密&lt;/p&gt;
&lt;p&gt;创建这个authenticator之后，客户端把它和ticket一起发送给服务。服务还没有session key就不能解密authenticator。key在ticket中，所以服务先解密ticket。&lt;/p&gt;
&lt;p&gt;解密ticket之后，服务获得以下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ticket的生命周期和时间戳；&lt;/li&gt;
&lt;li&gt;ticket拥有者名字；&lt;/li&gt;
&lt;li&gt;ticket拥有者的网络地址；&lt;/li&gt;
&lt;li&gt;session key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务检查ticket有没有过期。如果所有的都满足情况，服务用session key解密authenticator。如果解密过程没有问题，服务会得到用户名和一个网络地址。服务用这些信息和ticket里面的名字和网络地址进行比较，也和发送ticket和authenticator的用户的信息进行比较。如果所有都匹配，服务就确定ticket的发送者是ticket真实的拥有者。&lt;/p&gt;
&lt;p&gt;Athena暂停了一会儿，清了清嗓子，喝了一些咖啡。&lt;/p&gt;
&lt;p&gt;我认为session key-authenticator解决了重复使用的问题。&lt;/p&gt;
&lt;p&gt;Euripides: 也许是。但是我想……要破解这个版本的系统，我必须要有正确的authenticator。&lt;/p&gt;
&lt;p&gt;Athena: 不。你必须要有对应service上的authenticator和ticket。没有ticket只有authenticator是没用的，因为服务如果没有正确的session key就没法解密authenticator，服务不解密ticket就没法拿到正确的session key。&lt;/p&gt;
&lt;p&gt;Euripides: 好吧，我明白了，但是你是不是说一个客户端程序联系服务器的时候，它把ticket和匹配的authenticator一起发送？&lt;/p&gt;
&lt;p&gt;Athena: 对，我是这样讲的。&lt;/p&gt;
&lt;p&gt;Euripides: 如果是这样的后，怎么防止我同时窃取ticket和authenticator呢？我可以写一个程序这样做。如果我拿到了ticket和authenticator，我相信在ticket还没有过期前还能用它们。我只需要改变工作站的地址和用户名就行了。对吗？&lt;/p&gt;
&lt;p&gt;Athena: （咬嘴唇）是的。真令人沮丧。&lt;/p&gt;
&lt;p&gt;Euripides: 等一下，等一下。这不是什么大问题。Ticket只要没有过期都还能使用，但是不意味着authenticator必须是可以重用的。假设我们设计这个系统，authenticator只能用一次。这能解决我们的问题吗？&lt;/p&gt;
&lt;p&gt;Athena: 啊，也许可以。我们看一下，客户端程序创建了authenticator，然后和ticket一起发送给服务。你在我从工作站把它们发送给服务器的时候把两个都拷贝了一份。但是ticket和authenticator在你可以发送你的副本之前已经送到了。如果authenticator只能用一次，你的副本就没有用了，尝试重用你的ticket和authenticator的时候就会失败。&lt;/p&gt;
&lt;p&gt;好的，那就简单了。我们要做的就是用一个方法让authenticator只能用一次。&lt;/p&gt;
&lt;p&gt;Euripides: 没问题。我们就输入一个生命周期和时间戳进去。假如每一个authenticator有一个几分钟的生命周期。你要用服务的时候，你的客户端程序创建这个authenticator，用当前的时间盖戳，把它和ticket发送到服务器。&lt;/p&gt;
&lt;p&gt;服务器收到ticket和authenticator然后进行处理。服务器解压authenticator，检查authenticator的生命周期和时间戳。如果authenticator没有过期，所有东西就都检查完了，服务器认为你被认证了。&lt;/p&gt;
&lt;p&gt;假设我在它们在网络上传送的时候拷贝了authenticator和ticket。我必须更改我的工作站网络地址和我的用户名，我一定要在几分钟时间内做完这些。这是一个很高的要求。其实我认为这不可能。除非……&lt;/p&gt;
&lt;p&gt;有一个潜在的问题。假设不在ticket和authenticator从你的工作站到服务器传送的过程中拷贝它们，我拷贝了来源于Charon的原始的ticket包，就是你请求Charon给你一个ticket的时候取得的那个。&lt;/p&gt;
&lt;p&gt;这个包，如果我记得没错的话，有两份session key在里面：一个是给你的，另一个是给服务的。给服务的那一份在ticket里面，我拿不到，但是另一份呢，你用来创建authenticator的那一份session key呢？&lt;/p&gt;
&lt;p&gt;如果我可以拿到session key的一个拷贝，我自己可以创建我的authenticator，如果我能创建自己的authenticator，我就可以破解这个系统。&lt;/p&gt;
&lt;p&gt;Athena: 这个就是我昨天晚上在想的，但是我整理了整个获得ticket的过程，发现不可能这样偷到authenticator。&lt;/p&gt;
&lt;p&gt;你运行一个工作站，用kinit程序拿到你的ticket-granting ticket。kinit询问你的用户名，你输入以后，kinit把名字转发给Charon。&lt;/p&gt;
&lt;p&gt;Charon用你的名字查找你的密码，然后创建一个ticket-granting ticket给你。Charon同时创建一个session key，你可以和ticket-granting服务共享。Charon把session key的一个副本放在ticket-granting ticket里面，把你的那份放在包里面让你可以收到。在把包发送给你之前，Charon用你的密码加密所有内容。&lt;/p&gt;
&lt;p&gt;Charon在网络上发送数据包。有的人可以随时拷贝包，但是他们不能做什么，因为用你的密码加密了。尤其是，没有人可以偷走你的ticket-granting session key。&lt;/p&gt;
&lt;p&gt;Kinit拿到ticket包提示你输入密码。如果你输入了正确的密码，kinit可以解密包，给你session key的副本。&lt;/p&gt;
&lt;p&gt;现在你关心kinit的工作，你想取得自己的邮件。你启动邮件客户端程序。这个程序找邮件服务的ticket但是没有找到（毕竟目前都还没有取过邮件）。客户端必须用ticket-granting ticket向ticket-granting服务取得邮件服务的ticket。&lt;/p&gt;
&lt;p&gt;客户端为ticket-granting事务创建一个authenticator，然后用你的那份ticket-granting session key给authenticator加密。客户端向Charon发送authenticator, ticket-granting ticket，你的名字，你的工作站地址，和邮件服务的名字。&lt;/p&gt;
&lt;p&gt;ticket-granting服务收到这些，执行所有的认证检查。如果所有检查都通过了，ticket-granting服务最后获得一份和你共享的session key。现在ticket-granting服务创建一个邮件服务的ticket给你，这个过程中，同时创建一个新的session key给你并且让你和邮件服务共享。&lt;/p&gt;
&lt;p&gt;ticket-granting服务现在准备了一个ticket包发回到你的工作站。包里包含ticket和给你的邮件服务session key副本。但是在发送之前，ticket-granting服务用TICKET-GRANTING session key的副本对包进行加密。完成后，数据包按照其方式发送。&lt;/p&gt;
&lt;p&gt;因此，邮件服务ticket包到达，遍及网络。假设某些网络黑客在它发送的时候拷贝。黑客很不走运，因为数据包用ticket-granting session key加密了；你和ticket-granting服务是仅有的知道这个key的人。因为黑客不能解密邮件ticket数据包，黑客发现不了邮件session key。没有这个session key，黑客不能用你后续发送的邮件服务ticket。&lt;/p&gt;
&lt;p&gt;所以我认为我们是安全的。你觉得呢？&lt;/p&gt;
&lt;p&gt;Euripides: 可能是的。&lt;/p&gt;
&lt;p&gt;Athena: 可能！你就说这个吗？&lt;/p&gt;
&lt;p&gt;Euripides: （大笑）不要难过。你现在应该知道我的套路了。&lt;/p&gt;
&lt;p&gt;Euripides: 事实上，这个系统听上去是可以接受的。session key解决了我昨天晚上提出的问题：相互认证的问题。&lt;/p&gt;
&lt;p&gt;介意我花一点时间吗？&lt;/p&gt;
&lt;p&gt;Athena: 请随意&lt;/p&gt;
&lt;p&gt;Euripides: 你很好。昨天晚上，session  key和authenticator的注意在你脑中酝酿的时候，我试着找到这个系统的一些新问题，我发现一个我认为相当严重的。我用下面的场景给你解释。&lt;/p&gt;
&lt;p&gt;假设你对现在的工作很头疼，决定离开。你想在公司的打印机打印简历，以便猎头和潜在的雇主可以注意你。&lt;/p&gt;
&lt;p&gt;所以你输入打印命令，简历发送到打印机服务器。命令要取得服务ticket，如果你还没有这个ticket，就用你的名字发送给合适的打印服务器。至少那是你认为有更多用的服务器。你事实上并不知道请求是不是发送到了正确的打印服务器。&lt;/p&gt;
&lt;p&gt;假设某些缺德的黑客，比如是你的老板，给系统捣乱，让你发给打印服务器的请求和ticket重定向到他的办公室。他的打印服务器程序不关心ticket或者里面的内容。它丢掉ticket然后给你的工作站发送一个消息表明ticket传递就绪，服务器准备好要开始你的打印任务。打印命令发送任务到欺诈性的打印服务器，建立结果到了敌人那里。&lt;/p&gt;
&lt;p&gt;我用对比的方式说明问题。没有session key和authenticator，Charon可以保护不受错误的用户使用，但是不能保护用户免受错误的服务器的困扰。对于客户端程序，系统需要一个办法在发送敏感信息给服务器之前认证服务器。系统必须允许&lt;strong&gt;双向认证（mutual authentication）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但是session key可以解决这个问题，只要你能恰当地设计你的客户端程序。回到打印服务器的场景里。我希望打印客户端程序可以确保发送任务给合法的服务。&lt;/p&gt;
&lt;p&gt;一个程序应该这样。我输入打印命令给它一个文件名，我的简历名。假设我有一个服务ticket和session key。客户端程序用session key创建一个authenticator，然后发送authenticator和ticket给打印服务器。客户端还不发送简历，等待服务器的响应。&lt;/p&gt;
&lt;p&gt;真正的服务收到ticket和authenticator，解密ticket，取出session key，然后用session key解密authenticator。完成后，服务跑了所有认证测试。&lt;/p&gt;
&lt;p&gt;假设测试确认了我的身份。现在服务器准备一个回复的数据包以便向客户端程序证明它的身份。它用session key的副本加密回复的数据包，然后发送数据包给正在等待的客户端。&lt;/p&gt;
&lt;p&gt;客户端获得数据包然后尝试用自己的session key副本解密。如果数据包正确解密并且产生正确的服务器响应消息，我的客户端程序知道这个加密数据包的服务器是真正的服务器。现在客户端发送简历任务给打印服务器。&lt;/p&gt;
&lt;p&gt;假设我的boss给系统捣乱，让他的打印服务器看上去像我要的那一个。我的客户端发送authenticator和ticket到打印服务然后等待响应。那个假的打印服务不能生成正确的响应，因为它不能解密ticket拿到session key。我的客户端收不到正确的响应就不会发送任务。最终客户端放弃等待并退出。我的打印任务没能完成，但是至少我的简历最终没有没有落入敌手。&lt;/p&gt;
&lt;p&gt;我认为我们有了一个坚实的基础去做这个Charon认证系统了。&lt;/p&gt;
&lt;p&gt;Athena: 也许。但是，我不喜欢Charon这个名字。&lt;/p&gt;
&lt;p&gt;Euripides: 你不喜欢？什么时候的事？&lt;/p&gt;
&lt;p&gt;Athena: 我一直都不喜欢，因为这个名字一点也不合理。我有一天和我叔叔Hades谈到了这个，他推荐了另一个名字，他的三头看门犬。&lt;/p&gt;
&lt;p&gt;Euripides: Oh，你是说Cerberus。&lt;/p&gt;
&lt;p&gt;Athena: 注意你的发音Rip！是Cerberus……&lt;/p&gt;
&lt;p&gt;Euripides: 呃，不是那个名字吗？&lt;/p&gt;
&lt;p&gt;Athena: 是啊，如果你是罗马人！我是希腊的神，他是希腊的看门犬，所以他的名字是Kerberos。&lt;/p&gt;
&lt;p&gt;Euripides: 好吧，好吧，别仍你的闪电。我认可这个名字，听上去挺不错的。再见，Charon，你好，Kerberos。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;这段对话写于1988年，帮助读者理解Kerberos V4协议的设计原理。多年以来，它的任务完成得很好。&lt;/p&gt;
&lt;p&gt;我把这个转成HTML时，惊讶地发现这份文档还适用于Kerberos V5协议。虽然很多东西变了，但是基本的核心思想还保留着。事实上Kerveros V5和这篇对话里面描述的Kerberos协议只有两样东西不一样。&lt;/p&gt;
&lt;p&gt;第一个改变是认识到了仅仅5分钟的区间不足以防止攻击者再去使用authenticator，他们可以自动地抓取ticket和authenticator，然后立即发送来实施重用凭证的攻击。&lt;/p&gt;
&lt;p&gt;在Kerberos V5，authenticator是真正的只能用一次，服务器在authenticator保存一个记录，通过一个&amp;quot;replay cache&amp;quot;（重用缓存）允许ticket告知服务器最近的提交。如果一个攻击者尝试嗅探authenticator并重用，即使在五分钟的允许窗口时间内，replay cache也会判断authenticator已经提交服务器使用过。&lt;/p&gt;
&lt;p&gt;第二个主要的改变是，当第一次ticket交换时，ticket从Kerberos服务器发送到kinit，ticket不再使用用户密码加密。ticket已经在ticket granting服务的密钥中加密了；于是在实际使用其他ticket的时候，就在网络中直接传输。也就没有必要再用用户密码对ticket再加密一次。（其他的Kerberos服务器回复用户，比如用户的ticket session key，仍然是使用用户密码加密。）&lt;/p&gt;
&lt;p&gt;ticket granting service(TGS)也有一个类似的改变；TGS返回的ticket也不再需要ticket-granting ticket的服务密钥加密；因为应用ticket已经通过应用的服务密钥加密。比如，Kerberos V4的包是像这样的：&lt;/p&gt;
&lt;p&gt;KDC_REPLY = {TICKET, client, server, K_session}K_user&lt;/p&gt;
&lt;p&gt;{X}k_y读作“X使用K_Y进行加密”&lt;/p&gt;
&lt;p&gt;TICKET = {client, server, start_time, lifetime, K_session}K_server&lt;/p&gt;
&lt;p&gt;Kerberos V5里面，KDC_REPLY现在像这样：&lt;/p&gt;
&lt;p&gt;KDC_REPLY = TICKET, {client, server, K_session}K_user&lt;/p&gt;
&lt;p&gt;当然Kerberos V5也有很多新特性。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://web.mit.edu/kerberos/dialogue.html&#34;&gt;Designing an Authentication System: a Dialogue in Four Scenes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/fc2d2dbd510b&#34;&gt;kerberos入坑指南&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/artech/archive/2007/07/05/807492.html&#34;&gt;[原创]谈谈基于Kerberos的Windows Network Authentication - Part I&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/artech/archive/2007/07/07/809545.html&#34;&gt;[原创]谈谈基于Kerberos的Windows Network Authentication - Part II&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/artech/archive/2007/07/10/811970.html&#34;&gt;[原创]谈谈基于Kerberos的Windows Network Authentication - Part III&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/" term="posts" label="posts" />
                        
                    
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/study/" term="study" label="study" />
                        
                    
                
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/kerberos/" term="Kerberos" label="Kerberos" />
                            
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/authentication/" term="Authentication" label="Authentication" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">口令和认证</title>
            <link rel="alternate" type="text/html" href="https://sutrahsing.github.io/posts/study/password-and-authentication/" />
            <id>https://sutrahsing.github.io/posts/study/password-and-authentication/</id>
            <updated>2021-04-28T08:10:00&#43;08:00</updated>
            <published>2021-02-01T23:22:28&#43;08:00</published>
            <author>
                    <name>sutra hsing</name>
                    <uri>https://sutrahsing.github.io/</uri>
                    <email>sutrahsing@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">认证 认证的要点是为用户提供一些凭证，比如用户名和口令，然后在用户访问应用的时候验证他……</summary>
            
                <content type="html">&lt;h1 id=&#34;认证&#34;&gt;认证&lt;/h1&gt;
&lt;p&gt;认证的要点是为用户提供一些凭证，比如用户名和口令，然后在用户访问应用的时候验证他们提供了正确的凭证。那么我们需要用一些办法在数据库中保存好这些凭证。但是在服务端保存用于验证的口令不是一件容易的事情。&lt;/p&gt;
&lt;h2 id=&#34;存储口令&#34;&gt;存储口令&lt;/h2&gt;
&lt;p&gt;最简单的方法就是在数据库中创建一个表，保存用户名和对应的口令。用户登录的时候，服务器从用户得到一个验证请求，其中包含用户名和口令。通过比较来确定是否允许用户访问应用。&lt;/p&gt;
&lt;p&gt;这个模型中的安全强度和弹性取决于口令时怎么存储的。最基础的，最不安全的，就是用明文格式存储口令。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://denimgroup.com/resources/blog/2007/10/cleartext-vs-pl/&#34;&gt;Denim团队的Dan Cornell&lt;/a&gt;解释，明文就是明确可读的传输数据或者存储数据，比如未加密的信息。另一个术语是纯文本（plain text）。根据Cornell所述，纯文本可以用来作为加密算法的输入，因为纯文本是无格式的文本。&lt;/p&gt;
&lt;h2 id=&#34;哈希&#34;&gt;哈希&lt;/h2&gt;
&lt;p&gt;加密领域，哈希算法是一种数学算法，把任意大小的数据映射到固定大小的字符串。我们可以将函数输入称为&lt;strong&gt;消息&lt;/strong&gt;（message）或简称为输入。固定大小的字符串函数输出称为&lt;strong&gt;哈希&lt;/strong&gt;或*&lt;strong&gt;消息摘要&lt;/strong&gt;。&lt;a href=&#34;https://www.owasp.org/index.php/Guide_to_Cryptography#Hashes&#34;&gt;OWASP&lt;/a&gt;所述，加密中使用的哈希函数具有以下关键属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算散列很容易且实用，但是“如果只知道散列值，很难或不可能重新生成输入”。&lt;/li&gt;
&lt;li&gt;生成一个匹配的输出所需要的输入值很难。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以和加密算法（encryption）不同的是，通过哈希函数得到的值不能解密。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.auth0.com/blog/hashing-one-way-road-to-security/encryption-flow.png&#34; alt=&#34;Encryption and decryption flow example - two-way&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.auth0.com/blog/hashing-one-way-road-to-security/hash-flow.png&#34; alt=&#34;Hashing algorithm flow example - one-way&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;攻击口令&#34;&gt;攻击口令&lt;/h2&gt;
&lt;p&gt;有两种主要的攻击方式是我们需要关注的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字典攻击&lt;/li&gt;
&lt;li&gt;暴力攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们的工作原理很简单：用一个预生成的口令哈希表，通过简单的比较就可以找到相同的哈希值，可以生成这个哈希的口令就是你要找的。对于不用盐的口令，有很多口令和预生成的列表可以下载。下载之后只需要进行很简单的搜索就能破解。这样的列表就是我们所说的彩虹表。&lt;/p&gt;
&lt;p&gt;如果使用了盐，但并不是每个口令生成一个盐，攻击者要做的就是用这个盐手动生成一个彩虹表用来搜索。但是，如果你给每个口令生成一个独立的盐，那么攻击者需要给每个口令配上单独的盐生成一个列表。这是就另一种攻击方式，暴力攻击。&lt;/p&gt;
&lt;p&gt;暴力攻击通过一次又一次地猜测口令来达成目的。和慢哈希（bcrypt, scrypt, pgkdf2）不同的是，MD5或者SHA族（SHA-1, SHA-256, SHA-512等）是消息摘要算法，可以用来快速地确认一个消息有没有被修改过。&lt;/p&gt;
&lt;p&gt;最常见的用途是确认下载文件。从网络上下载文件后，在文件上运行MD5，就可以和站点上提供的哈希值进行比较，验证下载文件是否被篡改。&lt;/p&gt;
&lt;p&gt;这里的关键词是快速，但是快速是安全的敌人，因为要面对暴力破解。这些算法都不是为口令设计的。虽然我们希望让应用尽可能运行得快一些，但是在这里我们刻意地希望慢一些。&lt;/p&gt;
&lt;p&gt;使用bcrypt，可以让计算哈希值的速度能慢一些。这就是我们说的密钥延伸（key streching）。这样一来，能保证对于攻击者来说暴力破解的代价变得足够高，可能是时间上需要更长或者在相同事件下需要更高的算力的设备破解。&lt;/p&gt;
&lt;h2 id=&#34;哈希速度比较&#34;&gt;哈希速度比较&lt;/h2&gt;
&lt;p&gt;在2012年的大会上，Jeremi M. Gosney用商业级的硬件来比较不同哈希算法的性能。配置了五个服务器，有18个消费者级别的显卡：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10x HD 7970&lt;/li&gt;
&lt;li&gt;4x HD 5970(双GPU)&lt;/li&gt;
&lt;li&gt;3x HD 6990（双GPU）&lt;/li&gt;
&lt;li&gt;1x HD 5870&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结论如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Algorithm&lt;/th&gt;
&lt;th&gt;Hashes/Second&lt;/th&gt;
&lt;th&gt;MD5&lt;/th&gt;
&lt;th&gt;SHA-1&lt;/th&gt;
&lt;th&gt;SHA-512&lt;/th&gt;
&lt;th&gt;Bcrypt&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MD5&lt;/td&gt;
&lt;td&gt;180 Billion/second&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;65% Faster&lt;/td&gt;
&lt;td&gt;99.9997% Faster&lt;/td&gt;
&lt;td&gt;99.9999996% Faster&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;td&gt;63 Billion/second&lt;/td&gt;
&lt;td&gt;185% Slower&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;99.9994% Faster&lt;/td&gt;
&lt;td&gt;99.999887% Faster&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SHA-512&lt;/td&gt;
&lt;td&gt;364,000/second&lt;/td&gt;
&lt;td&gt;49.5M% Slower&lt;/td&gt;
&lt;td&gt;17.3M% Slower&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;80.49% Faster&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bcrypt&lt;/td&gt;
&lt;td&gt;71,000/second&lt;/td&gt;
&lt;td&gt;253.5M% Slower&lt;/td&gt;
&lt;td&gt;88.7M% Slower&lt;/td&gt;
&lt;td&gt;412% Slower&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这些年硬件性能不断提高，我们可预期的是，在相同级别的设备上，现在会有一个大幅的时间开销降低，大概2-4倍的性能提升。&lt;/p&gt;
&lt;p&gt;如果还用未加盐的或者是使用唯一盐值的MD5加密口令，攻击者使用这样的配置每秒可以进行&lt;em&gt;180,000,000,000&lt;/em&gt;次猜测。即使是最好的SHA算法SHA-512，比MD5慢49,000,000倍，每秒也可以猜364,000次。&lt;/p&gt;
&lt;p&gt;但是如果用bcrypt，并且配置开销因子为5，那么每秒只能有71,000次猜测。比MD5慢253,500,000%倍，比SHA-1慢88,700,000%倍，比SHA-512还要慢412%倍，相当于其速度的5.12倍。&lt;/p&gt;
&lt;p&gt;很多开发者希望仅仅通过迭代五次执行MD5来减慢暴力攻击。但是也只能把攻击的次数降低到每秒36,000,000,000，相当于单次SHA-1的两倍慢的速度，也还是比SHA-512快99.99898%，比bcrypt慢443,000,000%倍。&lt;/p&gt;
&lt;p&gt;bcrypt是非常棒的哈希口令方案，可以有效对抗暴力破解和字典攻击。&lt;/p&gt;
&lt;h2 id=&#34;bcrypt哈希结构&#34;&gt;bcrypt哈希结构&lt;/h2&gt;
&lt;p&gt;哈希值包含几个部分。这些部分可以让你了解如何生成的这个哈希值，不需要额外的信息来做验证。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.engineyard.com/hs-fs/hubfs/hash-anatomy.png?width=920&amp;amp;name=hash-anatomy.png&#34; alt=&#34;hash-anatomy&#34;&gt;&lt;/p&gt;
&lt;p&gt;前缀&lt;code&gt;$2a$&lt;/code&gt;标识了该哈希使用bcrypt算法及具体版本。&lt;/p&gt;
&lt;p&gt;cost是哈希计算的迭代次数，盐值，最后是哈希后的文本。&lt;/p&gt;
&lt;p&gt;2011年6月的1.1版本crypt_blowfish发布，修复了处理非ASCII字符会导致的不安全口令问题。为了分别潜在的问题，已知的问题和正确的哈希，引入了两个前缀。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$2a$ - 潜在的问题&lt;/li&gt;
&lt;li&gt;$2x$ - 已知的问题哈希&lt;/li&gt;
&lt;li&gt;$2y$ - 正确的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为ruby没有这个问题，只支持$2a$前缀和$2x$前缀兼容。&lt;/p&gt;
&lt;p&gt;PHP支持三个前面。&lt;/p&gt;
&lt;h2 id=&#34;双因子认证&#34;&gt;双因子认证&lt;/h2&gt;
&lt;p&gt;即使你使用了bcrypt来存储口令，也同样应该用双因子认证（two-factor authentication, 2FA）协作增强安全性。&lt;/p&gt;
&lt;p&gt;双因子认证在口令的基础上引入第二种认证。口令是用户所知道的，第二个认证机制可以是用户所拥有的或者用户是什么。比如用户所有的一个设备，其令牌值随着时间而变化，或者用户的生物特征信息。生物特征在网络应用中还不经常使用，所以我们主要聚焦在基于时间的令牌。&lt;/p&gt;
&lt;p&gt;通常，这是一个RSA安全ID类的设备，一个密钥环规格的工具，每30或60秒生成一个新的令牌给用户，用户输入这个值进行登录。这个令牌由一个共享的密钥生成，这个密钥只有这个设备和服务器知道。只要知道当前时间，服务器就可以计算出现在的令牌值。&lt;/p&gt;
&lt;p&gt;通常，我们的一些选项，包括软口令（比如谷歌认证），手机应用推送消息（比如推特）和短信。这些方法都在确保用户掌握一些东西——手机或者令牌生成器。&lt;/p&gt;
&lt;p&gt;应用开发人员应该为用户的信息安全负责。用SSL避免发送纯文本信息或者减少中间人攻击都是不够的。&lt;/p&gt;
&lt;p&gt;在很多语言里面，用bcyrpt都非常简单，而且还能避免两种主要的攻击途径：字典攻击和暴力破解。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/hashing-passwords-one-way-road-to-security/&#34;&gt;Hashing Passwords: One-Way Road to Security&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.engineyard.com/password-security-part-1&#34;&gt;Password Security&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/" term="posts" label="posts" />
                        
                    
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/study/" term="study" label="study" />
                        
                    
                
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/encryption/" term="Encryption" label="Encryption" />
                            
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/authentication/" term="Authentication" label="Authentication" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Never Truly Successsful</title>
            <link rel="alternate" type="text/html" href="https://sutrahsing.github.io/posts/interest/never-truly-successsful/" />
            <id>https://sutrahsing.github.io/posts/interest/never-truly-successsful/</id>
            <updated>2021-04-28T08:10:00&#43;08:00</updated>
            <published>2020-06-29T21:12:12&#43;08:00</published>
            <author>
                    <name>sutra hsing</name>
                    <uri>https://sutrahsing.github.io/</uri>
                    <email>sutrahsing@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/" term="posts" label="posts" />
                        
                    
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/interest/" term="interest" label="interest" />
                        
                    
                
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">现在就创建你的博客</title>
            <link rel="alternate" type="text/html" href="https://sutrahsing.github.io/posts/study/build-your-blog/" />
            <id>https://sutrahsing.github.io/posts/study/build-your-blog/</id>
            <updated>2021-04-28T08:10:00&#43;08:00</updated>
            <published>2020-06-27T00:00:00&#43;00:00</published>
            <author>
                    <name>sutra hsing</name>
                    <uri>https://sutrahsing.github.io/</uri>
                    <email>sutrahsing@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">&lt;p&gt;你可能不止一次听人们说，应该建立一个自己的站点了。但是因为可能会涉及比较多维护工作，以及繁忙的工作而搁置下来。但是这不代表博客不重要。&lt;/p&gt;……</summary>
            
                <content type="html">&lt;p&gt;你可能不止一次听人们说，应该建立一个自己的站点了。但是因为可能会涉及比较多维护工作，以及繁忙的工作而搁置下来。但是这不代表博客不重要。&lt;/p&gt;
&lt;p&gt;Hugo宣称是建立网站最快的框架，由GO语言编写，可以立即生成静态网站。&lt;/p&gt;
&lt;h2 id=&#34;前置条件&#34;&gt;前置条件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Github账户&lt;/li&gt;
&lt;li&gt;安装好的Hugo&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;第一步-安装hugo&#34;&gt;第一步: 安装Hugo&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在MacOS上，可以使用包管理器&lt;code&gt;Homebrew&lt;/code&gt;来进行安装。也可以在Windows上安装和运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;确认安装完成：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo version
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;第二步创建一个新的站点&#34;&gt;第二步：创建一个新的站点&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo new site quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;命令会在一个被命名为&lt;code&gt;quickstart&lt;/code&gt;的文件夹内创建一个新的Hugo站点。&lt;/p&gt;
&lt;h2 id=&#34;第三步添加主题&#34;&gt;第三步：添加主题&lt;/h2&gt;
&lt;p&gt;可以在 thems.gohugo.io 查看主题列表，这里使用&lt;a href=&#34;https://themes.gohugo.io/gohugo-theme-ananke/&#34;&gt;Ananke主题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从Github下载主题并添加到站点主题文件夹内：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; quickstart
git init
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;将主题添加到站点的配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;theme = &amp;#34;ananke&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;第四步加一些内容&#34;&gt;第四步：加一些内容&lt;/h2&gt;
&lt;p&gt;可以手动创建一个内容文件（例如&lt;code&gt;content/&amp;lt;CATAGORY&amp;gt;/&amp;lt;FILE&amp;gt;.&amp;lt;FORMAT&amp;gt;&lt;/code&gt;）然后在里面添加元数据，或者也可以使用&lt;code&gt;new&lt;/code&gt;命令来自动创建一个文件，并且自动生成一些元数据，比如标题和日期：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo new posts/my-first-posts.md
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;随意地编辑这个内容文件，它像下面这样开头：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;My First Post&amp;quot;
date: 2019-03-26T08:47:11+01:00
draft: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;第五步-启动hugo服务&#34;&gt;第五步： 启动Hugo服务&lt;/h2&gt;
&lt;p&gt;在使用drafts选项下启动Hugo：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;访问你的本地站点：http://localhost:1313/.
随便地修改或者添加内容，只要刷新浏览器就可以立刻看到变化。&lt;/p&gt;
&lt;h2 id=&#34;自定义主题&#34;&gt;自定义主题&lt;/h2&gt;
&lt;p&gt;新站点看上去已经很不错了，但是还需要一点调整再发布到网上。&lt;/p&gt;
&lt;h3 id=&#34;站点设置&#34;&gt;站点设置&lt;/h3&gt;
&lt;p&gt;使用编辑器打开&lt;code&gt;config.toml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;nx&#34;&gt;baseURL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://example.org/&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;languageCode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;en-us&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;My New Hugo Site&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;theme&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ananke&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;自行修改上面的&lt;code&gt;title&lt;/code&gt;。如果你已经有了一个域名，设置&lt;code&gt;baseURL&lt;/code&gt;。现在在本地部署运行服务还不需要这个值。&lt;/p&gt;
&lt;h2 id=&#34;第七步build你的静态页面&#34;&gt;第七步：build你的静态页面&lt;/h2&gt;
&lt;p&gt;很简单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo -D
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;默认输出到&lt;code&gt;./public/&lt;/code&gt;目录（使用&lt;code&gt;-d&lt;/code&gt;/&lt;code&gt;--destination&lt;/code&gt;来改变输出位置，或者在配置文件&lt;code&gt;publicshdir&lt;/code&gt;设置）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;草稿（draft）不会被部署到站点，完成一篇post后，设置文章的头&lt;code&gt;draft: false&lt;/code&gt;来标记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/rjy22WFcycTKDKNtrUbzqg&#34;&gt;是时候考虑搭建自己的站点了：Hugo 和 GitHub Pages 为你助力&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;hugo quick start&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/" term="posts" label="posts" />
                        
                    
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/study/" term="study" label="study" />
                        
                    
                
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/hugo/" term="hugo" label="hugo" />
                            
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/blog/" term="blog" label="blog" />
                            
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/github/" term="github" label="github" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Filebeat怎么工作</title>
            <link rel="alternate" type="text/html" href="https://sutrahsing.github.io/posts/study/how-filebeat-works/" />
            <id>https://sutrahsing.github.io/posts/study/how-filebeat-works/</id>
            <updated>2021-04-28T08:10:00&#43;08:00</updated>
            <published>2020-06-22T23:11:04&#43;08:00</published>
            <author>
                    <name>sutra hsing</name>
                    <uri>https://sutrahsing.github.io/</uri>
                    <email>sutrahsing@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Filebeat Overview Filebeat是用来转发和集中日志数据的轻量级传送程序。Filebeat监控你……</summary>
            
                <content type="html">&lt;h2 id=&#34;filebeat-overview&#34;&gt;Filebeat Overview&lt;/h2&gt;
&lt;p&gt;Filebeat是用来转发和集中日志数据的轻量级传送程序。Filebeat监控你所指定的日志文件或者位置，收集日志事件，转发到Elasticsearch或者Logstash用来索引。&lt;/p&gt;
&lt;p&gt;Filebeat的工作原理：Filebeat启动一个或多个输入，对你所指定的文件数据实施监控。Filebeat对每一个日志启动一个收集器。收集器将新的内容读为一条条日志，并将新的日志数据发送到libbeat，libbeat对事件进行聚集运算，发送聚集的数据到配置的输出。&lt;/p&gt;
&lt;h2 id=&#34;how-filebeat-works&#34;&gt;How Filebeat Works&lt;/h2&gt;
&lt;p&gt;Filebeat包含两个主要的组件：inputs和harvesters。两个组件合作跟踪文件新增，并将事件数据发送到指定的输出。&lt;/p&gt;
&lt;h3 id=&#34;what-is-harvesters&#34;&gt;What is harvesters?&lt;/h3&gt;
&lt;p&gt;一个harvester负责从一个单独的文件读入内容。havester从日志一条条地读入内容并发送到输出。收集器负责打开和关闭文件，意味着收集器运行的过程中持续使用文件描述符。如果文件在读取的过程中被重命名或删除，Filebeat会持续读入文件。一个负作用是磁盘的空间会预留到收集器关闭。默认情况下Filebeat保持文件打开直到close_inactive的消息送达。&lt;/p&gt;
&lt;p&gt;关闭一个harvester有如下的重要性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件的处理服务已经关闭，如果文件删除的时候harvester仍在读文件，释放资源。&lt;/li&gt;
&lt;li&gt;收集文件只会在scan_frequency过期后重启。&lt;/li&gt;
&lt;li&gt;当harvester关闭，再文件移动或者删除，对文件的收集不再继续。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-is-input&#34;&gt;What is input?&lt;/h3&gt;
&lt;p&gt;输入确保了管理收集器，并查找所有要读入的源。&lt;/p&gt;
&lt;p&gt;如果输入类型是log，输入将会匹配配置的路径，找到所有对应的文件，并为每一个文件启动一个收集器。每个输入使用自己的Go routine运行。&lt;/p&gt;
&lt;p&gt;下面例子配置Filebeat从所有匹配模式的文件收集日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;filebeat.inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/var/log/*.log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/var/path2/*.log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Filebeat支持多个输入类型。每个输入类型可以多次定义。log类型的输入检查每个文件是否需要启动对应的收集器，是否已经有一个收集器在运行，或者文件是否可以被忽略。只有文件大小改变，新的日志行才会被收集。&lt;/p&gt;
&lt;h3 id=&#34;how-does-filebeat-keep-the-state-of-files&#34;&gt;How does Filebeat keep the state of files?&lt;/h3&gt;
&lt;p&gt;Filebeat维护每一个文件的状态，周期性的将注册文件的状态刷入磁盘。状态用来记录最近收集器读取的偏移量，确定所有的日志行都被发送。如果输出（如Logstash或者Kafka）无法到达，Filebeat追踪最后发送的日志行，当输出可以到达的时候会继续从文件读取。Filebeat运行的过程中，每个文件输入的状态信息在内存持续维护。Filebeat重启的时候，注册文件的数据会用于重建状态，Filebeat在最后记录的位置继续每个收集器的工作。&lt;/p&gt;
&lt;p&gt;由于文件可能会被重命名或者移动，文件名和路径不足够确定一个文件。对于每一个文件，Filebeat存储唯一的标识符来检测是否曾经被收集过。&lt;/p&gt;
&lt;p&gt;如果你的用例每天会创建大量的新文件，你可能发现注册文件会越来越大。See Registry file is too large for details about configuration options that you can set to resolve this issue.&lt;/p&gt;
&lt;h3 id=&#34;how-does-filebeat-ensure-at-least-once-delivery&#34;&gt;How does Filebeat ensure at-least-once delivery?&lt;/h3&gt;
&lt;p&gt;Filebeat确保事件发送到配置的输出至少一次没有数据丢失。这是由于Filebeat在注册文件存储每个事件的传送状态。&lt;/p&gt;
&lt;p&gt;如果输出卡住，无法确认所有事件，Filebeat会持续发送事件直到输出确认收到事件。&lt;/p&gt;
&lt;p&gt;如果Filebeat在发送事件的过程中关闭，不会在关闭前等待输出确认所有事件。所有发送了但是在Filebeat关闭前没有确认的事件会在Filebeat重新启动后再次发送。这确保了所有事件至少发送一次，但是可能重复发送事件。可以配置Filebeat在关闭前等待一段时间。&lt;/p&gt;
&lt;p&gt;Filebeat至少发送一个保证的限制，包括log rotation和旧文件的删除。如果日志文件写到底盘，并且roration的速度比Filebeat处理得快，或者文件在输出获得之前被删除，数据可能会丢失。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/" term="posts" label="posts" />
                        
                    
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/study/" term="study" label="study" />
                        
                    
                
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/elastic-stack/" term="Elastic Stack" label="Elastic Stack" />
                            
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/beats/" term="Beats" label="Beats" />
                            
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/metricbeat/" term="Metricbeat" label="Metricbeat" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Metricbeat怎么工作</title>
            <link rel="alternate" type="text/html" href="https://sutrahsing.github.io/posts/study/how-metricbeat-works/" />
            <id>https://sutrahsing.github.io/posts/study/how-metricbeat-works/</id>
            <updated>2021-04-28T08:10:00&#43;08:00</updated>
            <published>2020-06-15T00:00:00&#43;00:00</published>
            <author>
                    <name>sutra hsing</name>
                    <uri>https://sutrahsing.github.io/</uri>
                    <email>sutrahsing@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">&lt;p&gt;Metricbeat包括module和metricset。module定义从特定的服务收集数据的基本逻辑，比如从Redis，MySQL等。module有关于服务的细节，包括如何连接，采集频率，从何处收集数据。&lt;/p&gt;……</summary>
            
                <content type="html">&lt;p&gt;Metricbeat包括module和metricset。module定义从特定的服务收集数据的基本逻辑，比如从Redis，MySQL等。module有关于服务的细节，包括如何连接，采集频率，从何处收集数据。&lt;/p&gt;
&lt;p&gt;每个module有一个或多个metricset。metricset是module抓取、整理数据的部分。每一个指标不是分别收集的，metricset可以通过一个请求从远端系统获得一组相关的指标。比如Redis module提供info metricset从Redis收集信息和统计数据，通过执行INFO命令并解析返回结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/06/26/ctRhioLVPZuIYbU.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;类似的，MySQL module提供一个status metricset来执行SHOW GLOBAL STATUS  的SQL语句。
Metricbeat按照设置module的period值周期性地从主机系统收集数据。因为多个metricset的组合可以发送到同一个服务，metricbeat可以在任何时候重用连接。如果在配置里面timeout之间内不能连接到主机系统，返回一个错误。Metricbeat异步地发送事件，所以是否返回是不确定的。如果配置的输出无法访问，事件就会丢失。
Metricbeat遇到错误的时候会向输出发送错误，所以无论是否失败，Metricbeat总会发送事件。这可以用来监控错误，查看调试信息来诊断问题。&lt;/p&gt;
&lt;h2 id=&#34;event-结构&#34;&gt;Event 结构&lt;/h2&gt;
&lt;p&gt;Metricbeat发送的每个事件有相同的结构。包含以下的字段：
@timestamp：时间捕获的时间
host.hostname：Beat运行的服务器主机名
agent.type：给Beat定义的名字
event.module：数据来源的module名
event.dataset：数据来源的module名&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@timestamp&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2016-06-22T22:05:53.291Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;agent&amp;#34;: &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;metricbeat&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;}&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;host&amp;#34;: &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;hostname&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;host.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;}&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;event&amp;#34;: &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;dataset&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;system.process&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;module&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;}&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;metricsets&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;wrong-event-结构&#34;&gt;Wrong Event 结构&lt;/h2&gt;
&lt;p&gt;服务无法访问的时候Metricbeat发送错误事件。错误事件和基础事件的结构相同，再有一个包含错误字符串的错误字段，可以用来检查所有指标事件的错误。
当Apache服务无法访问时候的错误事件&lt;/p&gt;
&lt;h2 id=&#34;metricbeat的关键特性&#34;&gt;Metricbeat的关键特性&lt;/h2&gt;
&lt;h3 id=&#34;metricbeat-错误事件&#34;&gt;Metricbeat 错误事件&lt;/h3&gt;
&lt;p&gt;Metricbeat不只发送了指标。不能接受到指标的时候，它发送错误事件。错误事件不是一个简单的标记，而是从主机抓取舒适的过程中创建的字符串。这样不仅仅可以监控指标，在监控的过程中发生的错误也能观察到。&lt;/p&gt;
&lt;p&gt;因为有全部的错误消息，可以快速地追踪错误。Metricbeat安装在主机本地，意味着你可以把本地的错误和其他问题迅速区分开，比如网络问题。
每一个metricset都在一个预定义的时间段内获得，所以Metricbeat没能在一个时间段获得指标，可以推断在主机或者主机的连接上存在一些问题。
抓取数据的时候不做聚合运算&lt;/p&gt;
&lt;p&gt;Metricbeat不做像guage, sum, counter一样的聚合运算。Metricbeat发送从主机的输出获得的原数据。使用Elasticsearch的时候，所有原数据可以访问是一种优势，可以用于挖掘细节，数据可以随时再处理。这也减少了Metricbeat的复杂性。&lt;/p&gt;
&lt;h3 id=&#34;不只发送数字&#34;&gt;不只发送数字&lt;/h3&gt;
&lt;h3 id=&#34;一个事件多个指标&#34;&gt;一个事件多个指标&lt;/h3&gt;
&lt;p&gt;每个事件可以包含多个指标。意味着可以发送一条请求给系统获得所有的指标，减少对主机系统的压力。如果直接发送指标到Elasticsearch作为输出，Elasticsearch可以直接以嵌套的JAON document的形式存储并查询指标。这使得发送指标数据到Elasticsearch变得非常高效。&lt;/p&gt;
&lt;p&gt;因为所有的原事件数据都是可以访问的，Metricbeat或者Elasticsearch可以随后对数据做任意需要的变化。例如，如果需要以Metrics2.0格式存储数据，你可以把完整的事件拆分成多个metrics2.0事件。&lt;/p&gt;
&lt;p&gt;每个指标的元信息存储在映射的模板里面。所有指标事件共有的元信息（比如主机和时间戳）都是事件结构的一部分，并且对于metricset的所有事件仅存储一次。&lt;/p&gt;
&lt;p&gt;如果一个服务的一个指标看上去好像不存在，也因为在一个事件里有所有相关的指标而更容易查看。&lt;/p&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/" term="posts" label="posts" />
                        
                    
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/study/" term="study" label="study" />
                        
                    
                
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/elastic-stack/" term="Elastic Stack" label="Elastic Stack" />
                            
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/beats/" term="Beats" label="Beats" />
                            
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/metricbeat/" term="Metricbeat" label="Metricbeat" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Elasticsearch介绍</title>
            <link rel="alternate" type="text/html" href="https://sutrahsing.github.io/posts/study/elasticsearch-intro/" />
            <id>https://sutrahsing.github.io/posts/study/elasticsearch-intro/</id>
            <updated>2021-04-28T08:10:00&#43;08:00</updated>
            <published>2020-04-13T21:27:49&#43;08:00</published>
            <author>
                    <name>sutra hsing</name>
                    <uri>https://sutrahsing.github.io/</uri>
                    <email>sutrahsing@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Elasticsearch是Elastic Stack的核心部分，分布式的搜索和分析引擎。Logstash和Beats专注于收集，聚集和丰富数据，并将这些数据存储在Elasticsearch。Kibana允许交互地探索，可视化，分享数据成果，管理并监控整个技术栈。</summary>
            
                <content type="html">&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;Elasticsearch是Elastic Stack的核心部分，分布式的搜索和分析引擎。Logstash和Beats专注于收集，聚集和丰富数据，并将这些数据存储在Elasticsearch。Kibana允许交互地探索，可视化，分享数据成果，管理并监控整个技术栈。&lt;/p&gt;
&lt;p&gt;Elasticsearch可以对各类数据进行实时搜索和分析。结构化的和非结构化的文本，数字型数据或者地理数据，Elasticsearch都可以高效地存储和索引，以便快速搜索。通过简单地操作检索数据和聚集信息，在此基础上发现数据中的趋势和模式。随着数据和查询量的增长，Elasticsearch天然的分布式特性允许无缝地、迅速地扩张部署集群规模。&lt;/p&gt;
&lt;p&gt;当然不是所有问题都是搜索问题，Elasticsearch的速度和弹性可以提供处理数据的广泛用例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为app或者网站增加一个搜索框&lt;/li&gt;
&lt;li&gt;存储分析日志，指标和安全事件数据&lt;/li&gt;
&lt;li&gt;机器学习实时地自动建立数据行为模型&lt;/li&gt;
&lt;li&gt;在商业的自动化工作流中使用Elasticsearch作为存储引擎&lt;/li&gt;
&lt;li&gt;使用Elasticsearch作为地理信息系统（GIS）管理，聚集，分析空间信息&lt;/li&gt;
&lt;li&gt;使用Elasticsearch作为生物信息搜索工具存储和处理基因数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据传入-document和indices&#34;&gt;数据传入： document和indices&lt;/h2&gt;
&lt;p&gt;Elasticsearch是分布式地对document的存储。Elasticsearch将复杂的数据结构序列化为JSON格式的document并进行存储，而不是像常见的数据一样一行行地存储列数据。将大量Elasticsearch节点在集群中部署后，存储的document分布在集群中，就可以通过任意的节点迅速地访问到。&lt;/p&gt;
&lt;p&gt;document存储后被索引，并且可以接近实时地查询到。Elasticsearch使用一个叫做倒排索引（inverted index）的数据结构来支持快速的全文检索。倒排索引可以列出全部document里面的所有独立word，然后标出这些word在文档出现的所有位置。&lt;/p&gt;
&lt;p&gt;一个索引可以认为是优化的document集合，每个document是field的集合，field是包含数据的键值对儿。通常，Elasticsearch通过每个field（字段）索引到所有数据，每个索引的field都有专用的、优化的数据结构。例如，文本field存储在倒排索引里，数字和地理field存储在BKD树中。维护这些数据结构并从中取得数据是Elasticsearch搜索如此迅速的原因。&lt;/p&gt;
&lt;p&gt;Elasticsearch还有一个无需模式的能力，意味着document可以被索引到，但是不需要明确地指定如何处理document中每个不同field。动态mapping启用之后，Elasticsearch自动检测并添加新的field到索引里面。这可以更容易地索引数据，只要开始索引document，Elasticsearch就会检测并map各种类型的数据到适合的Elasticsearch数据类型。&lt;/p&gt;
&lt;p&gt;你可以定义一些规则来控制dynamic mapping也可以明确定义mapping来完全掌握怎么存储field，怎么索引field。&lt;/p&gt;
&lt;p&gt;定义自己的mapping可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区分全文字符string field和特定的值string field&lt;/li&gt;
&lt;li&gt;运行特定语言的文本分析&lt;/li&gt;
&lt;li&gt;优化field的局部匹配&lt;/li&gt;
&lt;li&gt;自定义日期格式&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;geo_point&lt;/code&gt;和&lt;code&gt;geo_shape&lt;/code&gt;这样的不能自动检测的数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常会为不同的目的对同一字段建立不同的索引。例如，既希望把string field索引为文本field用来全文搜索，也想作为关键字field来排序或聚集数据。或者，可能选择使用多个语言分析器来处理包含用户输入的string field的内容。&lt;/p&gt;
&lt;p&gt;在索引期间应用于全文字段的分析链，也会在搜索时使用。查询全文字段时，在索引中查找到term之前，就可以查询文本进行相同的分析。&lt;/p&gt;
&lt;h2 id=&#34;信息输出搜索和分析&#34;&gt;信息输出：搜索和分析&lt;/h2&gt;
&lt;p&gt;用Elasticsearch作为document存储，并且用来取出document和它们的metadata，强大的能力来源于能够运用Apache Lucene 搜索引擎库的全部能力。&lt;/p&gt;
&lt;p&gt;Elasticsearch提供简单一致的REST API来管理集群，索引和搜索数据。在测试中，你可以通过命令行或者Kibana的开发控制栏，方便地直接提交请求。来自应用的请求，可以选择对应语言的&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/index.html&#34;&gt;Elasticseach client&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;搜索数据&#34;&gt;搜索数据&lt;/h3&gt;
&lt;p&gt;Elasticsearch REST API 支持结构化查询和全文搜索，以及这两种结合的复杂查询。结构化查询类似于SQL语句可以构建的查询。例如，查找&lt;code&gt;employee&lt;/code&gt;的索引中的&lt;code&gt;gender&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;两个字段，查询结果以&lt;code&gt;hire_date&lt;/code&gt;字段排序。全文查询寻找所有匹配字符串的document，返回结果按照相关度（&lt;em&gt;relevavance&lt;/em&gt;）进行排序。相关度评估了搜索term与document的匹配程度。&lt;/p&gt;
&lt;p&gt;还有查询单独的term，可以进行短语搜索，相似度搜索，和前缀搜索，并且自动获得搜索建议。&lt;/p&gt;
&lt;p&gt;地理空间的和其他数字类型的数据查询？Elasticseach以优化的数据结构来索引非文本的数据，支持高性能的地理和数据类型查询。&lt;/p&gt;
&lt;p&gt;使用ELasticsearch的JSON风格的查询语言（&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html&#34;&gt;Query DSL&lt;/a&gt;）实现这些查询能力。也可以构建&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-overview.html&#34;&gt;SQL查询语句&lt;/a&gt;来自然地搜索、聚集数据，JDBC和ODBC驱动允许广泛的第三方应用通过SQL连接Elasticsearch。&lt;/p&gt;
&lt;h3 id=&#34;分析数据&#34;&gt;分析数据&lt;/h3&gt;
&lt;p&gt;Elasticsearch的aggregation允许对数据建立复杂的summary，获得关键指标，模式和趋势的洞见（insight）。不只是找到谚语“大海捞针”，aggregation允许回答像这样的一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;海洋有多少针？&lt;/li&gt;
&lt;li&gt;针的平均长度？&lt;/li&gt;
&lt;li&gt;针长度的中位数是多少，由制造商区分&lt;/li&gt;
&lt;li&gt;过去六个月大海里面有多少针掉进去了？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也可以用一些aggregation回答更细致的问题，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最受欢迎的针的生产生是哪家？&lt;/li&gt;
&lt;li&gt;有哪些是不正常的针？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为aggregation使用和搜索一样的数据结构，所以处理速度也非常快。这就可以实时地分析，可视化数据。报告和dashboard和数据变化同步更新，所以可以基于最新的信息采取行动。&lt;/p&gt;
&lt;p&gt;aggregation操作由搜索请求决定。可以在一个单独的请求中针对数据，同时搜索docuemnt，filter结果，数据分析。aggregation在特定的查询上下文中计算，显示的针的计数符合用户查询的标准，比如，所有为不锈钢材质的针的数量。&lt;/p&gt;
&lt;h2 id=&#34;规模化和还原能力集群节点和分片&#34;&gt;规模化和还原能力：集群，节点和分片&lt;/h2&gt;
&lt;p&gt;Elasticsearch可以按需规模化。可以添加服务器（节点）到集群增加空间。Elasticsearch可以自然地在所有节点中分布数据和进行查询。&lt;/p&gt;
&lt;p&gt;Elasticsearch索引是在物理分片（shard）上面的逻辑组织。每一个分片事实上是独立的索引。把一个索引上的所有document分布在不同的分片，把分片分布在不同的节点，Elasticsearch可以保证冗余，来避免硬件挂掉带来的问题，并且提高查询性能。集群扩容之后，Elasticsearch自动地迁移分片来重新在集群中取得平衡。&lt;/p&gt;
&lt;p&gt;有两种分片：基础的和副本的。每个索引的document属于一个基础的分片，一个副本分片是基础分片的复制。副本分片提供数据的冗余备份对抗硬件错误，提高可用性。&lt;/p&gt;
&lt;p&gt;索引建立后基础分片的数量就定下来了，副本分片的数量任何时候都能改变，不会影响索引和查询。&lt;/p&gt;
&lt;h3 id=&#34;分片的影响&#34;&gt;分片的影响&lt;/h3&gt;
&lt;p&gt;对于索引的分片的大小和基础分片的数量设置，有一些对于性能的考量和权衡。分片越多，维护这些索引的日常开支就越多。分片越大，在Elasticsearch需要在集群重新均衡的时候需要用来移动分片的时间就越长。&lt;/p&gt;
&lt;p&gt;查询大量小的分片，每个分片处理的速度快，但是更多的查询意味着更多的日常开销。所以查询大量小的分片可能更快，但是往往有其他方面的因素牵制。&lt;/p&gt;
&lt;p&gt;起步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持平均分片大小在GB到几十GB。时间相关的数据情况下，通常分片在20GB到40GB区间。&lt;/li&gt;
&lt;li&gt;避免庞大的碎片问题。一个节点可以维持的分片数量和可以访问的堆空间成正比。通常，堆空间每1GB的分片数量应该小于20。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;决定配置的最好的方法是&lt;a href=&#34;https://www.elastic.co/cn/elasticon/conf/2016/sf/quantitative-cluster-sizing&#34;&gt;测试数据和查询&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;灾难情况&#34;&gt;灾难情况&lt;/h3&gt;
&lt;p&gt;由于性能原因，一个集群的节点是同一个网络的。在不同的数据中心平衡分片花太多时间。但是高可用的架构需要避免把鸡蛋放在一个篮子里。在一个地方的大断电事件中，另一个地方的服务器可以无缝地解决这个问题。答案是跨集群副本（ Cross-cluster replication，CCR）。&lt;/p&gt;
&lt;p&gt;CCR提供从主集群到次要的远程集群自动同步索引的技术，依此进行热备份。也可以用CCR创建第二个集群来给用户提供地理上接近的读请求服务。&lt;/p&gt;
&lt;p&gt;CCR是主动-被动的。基础集群的索引是主动的leader index，处理所有写请求。复制到副集群的索引是只读的follower。&lt;/p&gt;
&lt;h3 id=&#34;维护&#34;&gt;维护&lt;/h3&gt;
&lt;p&gt;Elasticsearch集成的安全、监控和管理特性允许你使用&lt;a href=&#34;https://www.elastic.co/guide/en/kibana/7.6/introduction.html&#34;&gt;Kibana&lt;/a&gt;作为控制中心管理集群。像&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-overview.html&#34;&gt;data rollups&lt;/a&gt;和&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/index-lifecycle-management.html&#34;&gt;index生命周期管理&lt;/a&gt;的特性帮助长时间地管理数据。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-intro.html&#34;&gt;Elasticsearch introduction&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/" term="posts" label="posts" />
                        
                    
                
                    
                    
                    
                        
                            <category scheme="https://sutrahsing.github.io/posts/study/" term="study" label="study" />
                        
                    
                
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/elastic-stack/" term="Elastic Stack" label="Elastic Stack" />
                            
                        
                            
                            
                            
                                <category scheme="https://sutrahsing.github.io/tags/elasticsearch/" term="Elasticsearch" label="Elasticsearch" />
                            
                        
                    
                
            
        </entry>
    
</feed>
